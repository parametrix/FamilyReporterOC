using System.IO;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Text;

namespace FamilyReporter
{
    internal static class NativeMethods
    {
        [DllImport("kernel32.dll")]
        internal static extern uint GetCompressedFileSizeW([In, MarshalAs(UnmanagedType.LPWStr)] string lpFileName,
           [Out, MarshalAs(UnmanagedType.U4)] out uint lpFileSizeHigh);

        [DllImport("kernel32.dll", SetLastError = true, PreserveSig = true)]
        internal static extern int GetDiskFreeSpaceW([In, MarshalAs(UnmanagedType.LPWStr)] string lpRootPathName,
           out uint lpSectorsPerCluster, out uint lpBytesPerSector, out uint lpNumberOfFreeClusters,
           out uint lpTotalNumberOfClusters);
    }

    internal class FileIOUtils
    {
        internal static long GetFileSizeOnDisk(string file)
        {
            FileInfo info = new FileInfo(file);
            uint dummy, sectorsPerCluster, bytesPerSector;
            int result = NativeMethods.GetDiskFreeSpaceW(info.Directory.Root.FullName, out sectorsPerCluster, out bytesPerSector, out dummy, out dummy);
            if (result == 0) throw new Win32Exception();
            uint clusterSize = sectorsPerCluster * bytesPerSector;
            uint hosize;
            uint losize = NativeMethods.GetCompressedFileSizeW(file, out hosize);
            long size;
            size = (long)hosize << 32 | losize;

            long sizeInBytes = ((size + clusterSize - 1) / clusterSize) * clusterSize;

            return ((size + clusterSize - 1) / clusterSize) * clusterSize;
        }

        // clean inputs
        // from: https://msdn.microsoft.com/en-us/library/844skk0h%28v=vs.110%29.aspx
        // The regular expression pattern [^\w\.@-] matches any character that is not a word character, a period, an @ symbol, or a hyphen. 
        // A word character is any letter, decimal digit, or punctuation connector such as an underscore.
        internal static string RemoveInvalidCharacters(string strIn)
        {
            // Replace invalid characters with empty strings.
            try
            {
                return Regex.Replace(strIn, @"[^\w\.@-]", "", RegexOptions.None, TimeSpan.FromSeconds(1.5));

            }
            // If we timeout when replacing invalid characters, 
            // we should return Empty.
            catch (RegexMatchTimeoutException)
            {
                return String.Empty;
            }
        }


        /// <summary>
        /// Creates CSV in same folder as document
        /// </summary>
        /// <returns></returns>
        //internal static string CreateSimpleCSVFile()
        //{

        //    //  ask user to select path
        //    string csvFilePath = UIEventApp.DbDoc.PathName;
        //    string csvFileName = UIEventApp.DbDoc.Title;
        //    FolderBrowserDialog dialog = new FolderBrowserDialog();
        //    if (dialog.ShowDialog() == DialogResult.OK)
        //    {
        //        csvFilePath = Path.Combine(dialog.SelectedPath, csvFileName);
        //    }

        //    if (File.Exists(csvFilePath))
        //    {
        //        DialogResult dlgResult = System.Windows.Forms.MessageBox.Show("Warning", "A File with the same name already exists at this location. Do you want to replace it?", MessageBoxButtons.YesNo);
        //        if (dlgResult == DialogResult.Yes)
        //        {
        //            File.Delete(csvFilePath);
        //        }
        //        else
        //        {
        //            return csvFilePath;
        //        }
        //    }

        //    List<DocumentInfo> docInfoList = new List<DocumentInfo>();

        //    foreach (FamilyDataModel familyData in UIEventApp.m_ViewModel.FamilyCollectionViewModel.FamilyCollection)
        //    {

        //        docInfoList.AddRange(AppendNestedNodeData(familyData));
        //    }

        //    StringBuilder sb = new StringBuilder();

        //    foreach (DocumentInfo docInfo in docInfoList)
        //    {
        //        if (docInfo == null)
        //        {
        //            continue;
        //        }
        //        sb.AppendLine(docInfo.ToString());
        //    }

        //    File.WriteAllText(csvFilePath, sb.ToString());

        //    return csvFilePath;
        //}

        /// <summary>
        /// Creates CSV 
        /// </summary>
        /// <returns></returns>
        internal static string CreateCSVFile()
        {

            //  ask user to select path
            string csvFilePath = UIEventApp.DbDoc.PathName;
            string csvFileName = UIEventApp.DbDoc.Title;
            FolderBrowserDialog dialog = new FolderBrowserDialog();
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                csvFilePath = Path.Combine(dialog.SelectedPath, csvFileName);
            }

            if (File.Exists(csvFilePath))
            {
                DialogResult dlgResult = System.Windows.Forms.MessageBox.Show("Warning", "A File with the same name already exists at this location. Do you want to replace it?", MessageBoxButtons.YesNo);
                if (dlgResult == DialogResult.Yes)
                {
                    File.Delete(csvFilePath);
                }
                else
                {
                    return csvFilePath;
                }
            }


            CsvDestination destination = new CsvDestination(csvFilePath);
            using (var csvFile = new CsvFile<DocumentInfo>(destination))
            {
                List<DocumentInfo> docInfoList = new List<DocumentInfo>();

                foreach (FamilyDataModel familyData in UIEventApp.m_ViewModel.FamilyCollectionViewModel.FamilyCollection)
                {

                    docInfoList.AddRange(AppendNestedNodeData(familyData));
                }

                foreach (DocumentInfo docInfo in docInfoList)
                {
                    if (docInfo == null)
                    {
                        continue;
                    }
                    csvFile.Append(docInfo);
                }
            }
            return csvFilePath;
        }


        /// <summary>
        /// Recursive function to extract doc info from nodes
        /// </summary>
        /// <param name="treeViewItem"></param>
        /// <returns></returns>
        private static List<DocumentInfo> AppendNestedNodeData(TreeViewItemBase treeViewItem)
        {
            List<DocumentInfo> docInfoList = new List<DocumentInfo>();

            DocumentInfo docInfo = FileIOUtils.CreateDocumentInfoFromDocumentViewModel(treeViewItem);
            if (null != docInfo)
            {
                docInfoList.Add(docInfo);
            }

            if (null == treeViewItem.Parent && treeViewItem.Children.Count > 0)
            {
                foreach (var child in treeViewItem.Children)
                {
                    if (null != child)
                    {
                        docInfoList.AddRange(AppendNestedNodeData(child));
                    }
                }
            }

            return docInfoList;
        }

        /// <summary>
        /// Retrieves DocInfo for JSON translation
        /// </summary>
        /// <param name="docViewModel"></param>
        /// <returns></returns>
        internal static DocumentInfo CreateDocumentInfoFromDocumentViewModel(TreeViewItemBase treeViewItem)
        {
            DocumentInfo docInfo = null;
            if (null == treeViewItem)
            {
                return null;
            }
            if (treeViewItem.GetType() == typeof(FamilyDataModel))
            {
                FamilyDataModel familyDataModel = treeViewItem as FamilyDataModel;
                string parentNodeName = familyDataModel.Parent == null ? "" : familyDataModel.Parent.Name;
                docInfo = new DocumentInfo()
                {
                    ParentNodeName = parentNodeName,
                    DocumentCategory = familyDataModel.Family.FamilyCategory.Name,
                    DocumentName = familyDataModel.Name,
                    NumberOfInstances = familyDataModel.NumberOfInstances.ToString(),
                    SizeInKb = familyDataModel.SizeInKb.ToString()
                };
            }

            return docInfo;
        }

    }
}
